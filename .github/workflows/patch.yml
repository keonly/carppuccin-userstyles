name: Fetch, Patch, and Push

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  fetch-patch-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Current Repository
        uses: actions/checkout@v4
        with:
          ref: main
          lfs: true

      - name: Setup Git Config
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Add Remote and Fetch Main Branch
        run: |
          git remote add upstream ${{ vars.UPSTREAM_REPO }}
          git fetch upstream

      - name: Checkout and Reset the Target Directory
        run: |
          git checkout upstream/${{ vars.UPSTREAM_BRANCH }} -- ${{ vars.STYLES_DIR }}
          git reset HEAD ${{ vars.STYLES_DIR }}

      - name: Replace Colour Codes in CSS Files
        run: |
          declare -A colour_map=(
            ["11111b"]="000000" # crust
            ["181825"]="0b0b0b" # mantle
            ["1e1e2e"]="161616" # base
            ["313244"]="262626" # surface0
            ["45475a"]="393939" # surface1
            ["585b70"]="525252" # surface2
            ["6c7086"]="6f6f6f" # overlay0
            ["7f849c"]="8d8d8d" # overlay1
            ["9399b2"]="a8a8a8" # overlay2
            ["a6adc8"]="c6c6c6" # subtext0
            ["bac2de"]="e0e0e0" # subtext1
            ["cdd6f4"]="f4f4f4" # text
          )
          CSS_FILES=$(find ${{ vars.STYLES_DIR }} -type f -name "*.css")
          for file in $CSS_FILES; do
            for colour in "${!colour_map[@]}"; do
              sed -i "s/$colour/${colour_map[$colour]}/Ig" "$file"
            done
          done

      - name: Check for file changes in styles directory
        id: check_changes
        run: |
          git diff --quiet ${{ vars.STYLES_DIR }} || echo "Changes detected"

      - name: Commit and Push Patches (if changes exist)
        if: ${{ steps.check_changes.outcome != 'success' }}
        run: |
          git add ${{ vars.STYLES_DIR }}
          git commit -m "chore: patched on $(date +'%Y-%m-%d')"
          git push origin ${{ vars.LOCAL_BRANCH }}

      - name: Check for LFS Object Differences
        id: check-lfs-changes
        run: |
          git lfs fetch upstream ${{ vars.UPSTREAM_BRANCH }}
          LOCAL_LFS=$(git lfs ls-files | awk '{print $3}')
          UPSTREAM_LFS=$(git lfs ls-files --ref upstream/${{ vars.UPSTREAM_BRANCH }} | awk '{print $3}')
          if [[ "$LOCAL_LFS" != "$UPSTREAM_LFS" ]]; then
            echo "lfs-changed=true" >> $GITHUB_ENV
          else
            echo "lfs-changed=false" >> $GITHUB_ENV
          fi

      - name: Sync LFS Objects (if changes exist)
        if: ${{ env.lfs-changed == 'true' }}
        run: |
          git lfs fetch upstream ${{ vars.UPSTREAM_BRANCH }}
          git lfs push origin ${{ vars.LOCAL_BRANCH }}
